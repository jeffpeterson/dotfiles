#!/usr/bin/env bash

source "${BASH_SOURCE%/*}/_includes.sh"

ROOT=`realpath ${BASH_SOURCE%/*}/../..`
REPO_ROOT="https://github.com/jeffpeterson/dotfiles"

usage_name "dot" <<-DESC
	A tool for managing dotfiles.
DESC

usage_cmd link "[-f]" <<-DESC
	Link everything.
DESC

usage_cmd edit "[dotfile]" <<-DESC
	Edit a dotfile in the default VISUAL editor.
DESC

usage_cmd repo "[dotfile]" <<-DESC
	Show a dotfile on github.
DESC

usage_cmd root <<-DESC
	Print the path to the dotfiles repo.
DESC

usage_cmd bin <<-DESC
	Print the path to the dotfiles bin directory.
DESC

usage_cmd os <<-DESC
	Print the name of the current OS.
DESC

usage_cmd link-all "<srcdir>" "<dstdir>" <<-DESC
	Safely link all files in <srcdir> to <dstdir>.
DESC

usage_cmd link-file "<src>" "<dst>" <<-DESC
	Safely link <src> to <dst>.
DESC

usage_cmd help <<-DESC
	Print this doc.
DESC

declare -A FLAGS

dot() {
	required "cmd" $1

	case $cmd in
		link)
			dot link-all "$ROOT/home" "$HOME"
			show $(green "Done!")
			;;

		link-all)
			required srcdir "$2"
			required dstdir "$3"

			for f in `ls -A "$srcdir"`; do
				dot link-file "$srcdir/$f" "$dstdir/$f"
			done
			;;


		link-file)
			required src $2
			required dst $3

			cur=`readlink -n "$dst"`
			pretty="~/$(realpath -s --relative-to="$HOME" "$dst")"

			if [ -z "${FLAGS[force]}" ]; then
				if [ ! -z "$cur" ]; then
					if [ "$cur" == "$src" ]; then
						echo "$(dim "Found $pretty")"
						return
					else
						echo $(yellow "$pretty -> $cur already linked")
						return
					fi
				elif [ -e "$dst" ]; then
					echo "$(red "$pretty exists!")"
					return
				fi
			fi

			ln -nsf "$src" "$dst" && echo "$(green Linked) $pretty"
			;;

		root)
			echo "$ROOT"
			;;

		bin)
			echo "$(realpath ${BASH_SOURCE%/*})"
			;;

		os)
			uname -a | cut -d " " -f 1 | tr '[:upper:]' '[:lower:]'
			;;

		edit)
			optional file "$2"

			if [[ ! -z $file ]]; then
				$VISUAL "$ROOT/home/$file"
			else
				$VISUAL "$ROOT"
			fi
			;;

		repo)
			optional file "$2"

			if [[ ! -z $file ]]; then
				open "$REPO_ROOT/tree/master/home/$file"
			else
				open "$REPO_ROOT"
			fi
			;;

		help | usage)
			usage
			;;

		*)
			error "'$1' is not a valid command."
			;;
	esac
}

PARAMS=()

while [[ $# -gt 0 ]]; do
	case "$1" in
		-f|--force)
			FLAGS[force]="1"
			shift
			;;

		*)
			PARAMS+=("$1")
			shift
	esac
done

dot "$PARAMS"
