#!/usr/bin/env bash

source "${BASH_SOURCE%/*}/_includes.sh"

ROOT=`realpath ${BASH_SOURCE%/*}/../..`


usage_name "dot" <<-DESC
	A tool for linking dotfiles.
DESC

usage_cmd link <<-DESC
	Links everything.
DESC

usage_cmd link-all "<srcdir>" "<dstdir>" <<-DESC
	Safely links all files in <srcdir> to <dstdir>.
DESC


usage_cmd link-file "<src>" "<dst>" <<-DESC
	Safely links <src> to <dst>.
DESC


usage_cmd os <<-DESC
	Prints the name of the current OS.
DESC

usage_cmd help <<-DESC
	Prints this doc.
DESC

usage_cmd edit "[dotfile]" <<-DESC
	Edit a dotfile in the default VISUAL editor.
DESC


dot() {
	required "cmd" $1

	case $cmd in
		link)
			dot link-all "$ROOT/home" "$HOME"
			show $(green "Done!")
			;;

		link-all)
			required srcdir "$2"
			required dstdir "$3"

			for f in `ls -A "$srcdir"`; do
				dot link-file "$srcdir/$f" "$dstdir/$f"
			done
			;;


		link-file)
			required src $2
			required dst $3

			cur=`readlink -n "$dst"`
			pretty="~/$(realpath -s --relative-to="$HOME" "$dst")"

			if [ ! -z "$cur" ]; then
				if [ "$cur" == "$src" ]; then
					echo "$(dim "Found $pretty")"
				else
					echo $(yellow "$pretty -> $cur already linked")
				fi
			elif [ -e "$dst" ]; then
				echo "$(red "$pretty exists!")"
			else
				ln -ns $FLAGS "$src" "$dst" && echo "$(green Linked) $pretty"
			fi
			;;

		os)
			uname -a | cut -d " " -f 1 | tr '[:upper:]' '[:lower:]'
			;;

		edit)
			optional file "$2"

			if [[ ! -z $file ]]; then
				$VISUAL "$ROOT/home/$file"
			else
				$VISUAL $ROOT
			fi
			;;

		help | usage)
			usage
			;;

		*)
			error "'$1' is not a valid command."
			;;
	esac
}

dot "$@"
